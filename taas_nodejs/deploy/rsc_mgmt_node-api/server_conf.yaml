heat_template_version: 2014-10-16

parameters:
  private_net:
    type: string
    description: The network for the instances
    constraints:
      - custom_constraint: neutron.network
        description: ID of an existing network
  public_net:
    type: string
    description: ID of public network for which floating IP addresses will be allocated
    default: public
    constraints:
      - custom_constraint: neutron.network
        description: ID of an existing network
  image:
    type: string
    description: The ID or name of the image to use to create the instance
    default: Ubuntu Server 16.04 LTS Xenial
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image
  flavor:
    type: string
    description: The flavor that the application uses
    default: m1.small
    constraints:
    - custom_constraint: nova.flavor
      description: Must be a valid flavor provided by your cloud provider.
  key_name:
    type: string
    description: Name of an existing keypair to enable SSH access to the instances
    default: sit_taas_heat
    constraints:
    - custom_constraint: nova.keypair
      description: Must already exist on your cloud
resources:
  server:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      image: { get_param: image }
      networks:
        - port: { get_resource: server_port }
      metadata: { "metering.stack": { get_param: "OS::stack_id"}}
      user_data_format: RAW
      user_data: |
        #!/usr/bin/env bash
        passwd ubuntu<<EOF
        ubuntu
        ubuntu
        EOF
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
        service ssh restart
  server_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      security_groups: [default]
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server_port }
outputs:
  server_name:
    description: The name of the instances
    value:
      get_attr: [server, name]
  floating_ip:
    description: The floating ip of instances
    value:
      get_attr: [floating_ip, floating_ip_address]
  private_ip:
    description: The private ip of instances
    value:
      get_attr: [server, first_address]