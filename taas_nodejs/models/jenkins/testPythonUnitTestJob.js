/**
 * @fileoverview Jenkins integration for generic Python unit test support
 */
var util = require('util');
var path = require('path');
var validator = require('validator');
var logger = require('./getLogger').logger;
var JenkinsJob = require('./job').JenkinsJob;
var libPath = require('./libPath');

const JOB_TYPE = 'test/python_unit_test';
const JOB_PREFIX = 'TestPythonUnitTest';
const JOB_SLAVE = 'taas && base';
const FULL_JOB_NAME = 'Jenkins Python Unit Test Job';

/**
 * Build a Jenkins Python Unit Test job instance.
 * @classdesc Jenkins Python Unit Test job
 * @constructor
 * @extends JenkinsJob
 * @param {String} jobName job name
 */
function JenkinsTestPythonUnitTestJob(jobName) {
    // call the parent constructor
    JenkinsJob.call(this, jobName);
    this._type = JOB_TYPE;
}

// inherit from JenkinsJob
util.inherits(JenkinsTestPythonUnitTestJob, JenkinsJob);


/**
 * Enum for Python major version.
 * @readonly
 * @enum {number}
 */
JenkinsTestPythonUnitTestJob.PYTHON_VER = {
    /** Not specifying a valid Python version */
    NONE: 0,
    /** Python 2.x */
    V2: 200,
    /** Python 3.x */
    V3: 300
};


JenkinsTestPythonUnitTestJob.__getPythonCmd = function(pythonVersion) {
    switch (pythonVersion) {
        case JenkinsTestPythonUnitTestJob.PYTHON_VER.NONE:
            return 'python';
        case JenkinsTestPythonUnitTestJob.PYTHON_VER.V2:
            return 'python2';
        case JenkinsTestPythonUnitTestJob.PYTHON_VER.V3:
            return 'python3';
        default:
            return new Error('Invalid python version: ' + pythonVersion);
    }
};


/**
 * Create a new name for Jenkins Deploy Generic job. <br/>
 * @returns {string} new job name
 * @private
 */
function gitCreateJobName() {
    return JenkinsJob._createJobName(JOB_PREFIX);
}


/**
 * Get the run file name
 * @private
 * @static
 * @param {string} jobName job name
 * @returns {string} run file name
 */
JenkinsTestPythonUnitTestJob.__getRunFileName = function(jobName) {
    return 'Python-results-' + jobName + '.html';
};


/**
 * Create the Jenkins job configuration options
 * @private
 * @static
 * @param {Object} opts job settings. See {@link JenkinsTestPythonUnitTestJob.getCreateOptionsDescriptor} for more info.
 * @param {string} jobName job name
 * @param {fn} callback receives the job creation response. Parameters:
 *   <ul>
 *     <li>err: error object</li>
 *     <li>jobCfgOpts: an object representing Jenkins job XML configuration options</li>
 *   </ul>
 */
JenkinsTestPythonUnitTestJob.__createJobCfg = function(opts, jobName, callback) {

    function onError(err) {
        logger.debug(err);
        return callback(err);
    }

    function getErrOptions(optValidation) {
        var errorOpts = optValidation.map(function(val) {return val.name;});
        return errorOpts.join(',');
    }

    var optValidation = JenkinsTestPythonUnitTestJob.__validateCreateOptions(opts);
    if (optValidation.length) {
        return onError(new Error('Validation error for options ' + getErrOptions(optValidation)));
    }

    var cmd = JenkinsTestPythonUnitTestJob.__createJobCommands(opts, jobName);

    var cfgOpts = {
        description: 'This job is generated by TaaS::JenkinsTestPythonUnitTestJob.',
        assignedNode: JOB_SLAVE,
        builders: [
            {
                type: 'shell',
                command: cmd
            }
        ],
        buildWrappers: [
            {
                type: 'archive',
                configName: 'Archive server',
                remoteDirectory: 'archive_root/${JOB_NAME}/${BUILD_NUMBER}',
                sourceFiles: JenkinsTestPythonUnitTestJob.__getRunFileName(jobName),
                execTimeout: 120000
            }
        ],
    };
    return callback(null, cfgOpts);
};


// TODO: chroot or jail
/**
 * Create build commands
 * @private
 * @returns {string} the commands as a string or an error object
 */
JenkinsTestPythonUnitTestJob.__createJobCommands = function(opts, jobName) {
    var runFileName = JenkinsTestPythonUnitTestJob.__getRunFileName(jobName);
    var startScriptPath = opts.startScriptPath;
    var pythonVersion = opts.pythonVersion?
        parseInt(opts.pythonVersion):
        JenkinsTestPythonUnitTestJob.PYTHON_VER.NONE;
    var pythonCmd = JenkinsTestPythonUnitTestJob.__getPythonCmd(pythonVersion);

    let cmd = '';  // command to append (esp. for long formatted commands)

    let buildCmds = [
        '#!/bin/bash',  // does not enable the 'x' & 'e' shell options:
                        // does not echo commands;
                        // does not abort script at first failure
        'sudo rm -f ' + runFileName,
        'if [ -f env.properties ]; then',
        '    eval $(cat env.properties)',
        'fi'
    ];

    // separate the script file from its directory
    let startDirectory, pattern;
    if (startScriptPath.endsWith('.py')) {
        startDirectory = path.dirname(startScriptPath);
        pattern = path.basename(startScriptPath);
    }
    else {
        startDirectory = startScriptPath;
        pattern = '*.py';
    }

    cmd = util.format(
        '%s ~/%s/python/runtest.py "%s" "%s" "%s"',
        pythonCmd,
        libPath.test_lib,
        startDirectory, pattern, runFileName
    );

    buildCmds.push(cmd);
    buildCmds.push('runtest_ret=$?');

    if(opts.testManagementSpiraTest[0]){
        let host,port;
        if(opts.spiraTestHost.indexOf(":") != -1){
            host = opts.spiraTestHost.split(':')[0];
            port = opts.spiraTestHost.split(':')[1];
        }else{
            host = opts.spiraTestHost;
            port = 80;
        }
        let pattern = this.__escapeDoubleQuotes(opts.TestCaseNamePattern);
        let replace = this.__escapeDoubleQuotes(opts.TestCaseNameReplace);
        let autoCreateTestcase = "NotAutoCreateTestCase";
        opts.SpiraTestOptions.forEach(function(option){
            if(option == 1){
                autoCreateTestcase = "AutoCreateTestCase";
            }
        });
        let spiraTestRelease;
        switch(opts.spiraTestRelease){
            case 0:
                spiraTestRelease = '" "';
                break;
            case 1:
                spiraTestRelease = this.__escapeDoubleQuotes(opts.spiraTestReleaseID)+ '" "';
                break;
            case 2:
                spiraTestRelease = this.__escapeDoubleQuotes(opts.spiraTestReleaseVersion)+ '" "';
                break;
            case 3:
                spiraTestRelease = this.__escapeDoubleQuotes(opts.spiraTestReleaseName) + '" "' + this.__escapeDoubleQuotes(opts.spiraTestReleaseVersion);
                break;
        }
        
        let suppresslevel = opts.FolderSuppressLevel.toString();
        opts.spiraTestProjectID = this.__escapeDoubleQuotes(opts.spiraTestProjectID);
        opts.spiraTestProjectName = this.__escapeDoubleQuotes(opts.spiraTestProjectName);
        opts.spiraTestUsername = this.__escapeDoubleQuotes(opts.spiraTestUsername);
        opts.TestCaseFolderName = this.__escapeDoubleQuotes(opts.TestCaseFolderName);
        let cmd = util.format(
            'sudo python3 ~/%s/PythonSpiraTestReporter.py "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s"',
            libPath.test_mgmt_lib,runFileName, host, port, opts.spiraTestProjectID, opts.spiraTestProjectName, opts.spiraTestUsername, opts.spiraTestApiKey, opts.TestCaseFolderName, pattern, replace, suppresslevel, autoCreateTestcase, opts.spiraTestRelease.toString(), spiraTestRelease 
        );
        buildCmds.push(cmd);
    }
    buildCmds.push('exit $runtest_ret');
    return buildCmds.join('\n');
};


/**
 * Create a new Jenkins Python Unit Test Job.
 * @static
 * @param {Object} opts job settings. See {@link JenkinsTestPythonUnitTestJob.getCreateOptionsDescriptor} for more info.
 * @param {fn} callback receives the job creation response. Parameters:
 *   <ul>
 *     <li>err: error object</li>
 *     <li>code: creation response. Options:
 *       <ul>
 *         <li>JenkinsJob.UPDATE.OK</li>
 *         <li>JenkinsJob.UPDATE.ALREADY_EXISTS</li>
 *         <li>JenkinsJob.UPDATE.ERROR</li>
 *       </ul>
 *     </li>
 *     <li>jobName: the new job name</li>
 *   </ul>
 */
JenkinsTestPythonUnitTestJob.create = function(opts, callback) {
    var jobName = gitCreateJobName();
    JenkinsTestPythonUnitTestJob.__createJobCfg(opts, jobName, function(err, jobCfgOpts) {
        if (err) {
            let errObj = new Error(FULL_JOB_NAME + ' creation error: ' + err.toString());
            logger.debug(errObj);
            return callback(errObj, JenkinsJob.UPDATE.ERROR);
        }
        return JenkinsJob._create(jobName, JOB_TYPE, jobCfgOpts, callback);
    });
};


const OPTIONS_DESCRIPTOR = [
    {
        name: 'startScriptPath',
        displayName: 'Script path',
        displayHint: 'Path to the Python unit test script(s), ' +
            ' which is a path either to the test case python file or to the directory of the python test module.',
        type: JenkinsJob.DESCRIPTOR_TYPE.PATH
    },
    {
        name: 'pythonVersion',
        displayName: 'Python version',
        displayHint: 'Python major version',
        type: JenkinsJob.DESCRIPTOR_TYPE.OPTION,
        options: [
            {
                value: JenkinsTestPythonUnitTestJob.PYTHON_VER.V2,
                displayName: 'Python 2',
                displayHint: 'Python 2'
            },
            {
                value: JenkinsTestPythonUnitTestJob.PYTHON_VER.V3,
                displayName: 'Python 3',
                displayHint: 'Python 3'
            }
        ]
    },
    {
        name: 'testManagementSpiraTest',
        displayName: 'Upload test results to SpiraTest',
        displayHint: 'If you check this, system will upload your test report to SpiraTest when you run this task',
        type: JenkinsJob.DESCRIPTOR_TYPE.OPTION,
        multiple: true,
        options:[
            {
                value: 1,
                name: 'Upload_report_data_to_SpiraTest',
                displayName: '',
                displayHint: ''
            }
        ]
    },
    {
        name: 'spiraTestForm',
        visibility: false,
        type: JenkinsJob.DESCRIPTOR_TYPE.PARENTDIV,
        childs:[
            {
                name: 'spiraTestUsername',
                displayName: 'SpiraTest Username',
                displayHint: 'Username of SpiraTest account. This is needed if uploading to SpiraTest is required.',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                required:true
            },
            {
                name: 'spiraTestApiKey',
                displayName: 'SpiraTest Api-Key',
                displayHint: 'api-key of SpiraTest account. This is needed if uploading to SpiraTest is required.',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                required:true
            },
            {
                name: 'spiraTestHost',
                displayName: 'SpiraTest Host',
                displayHint: 'Url of SpiraTest server. This is needed if uploading to SpiraTest is required.',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                required:true
            },
            {
                name: 'spiraTestProjectID',
                displayName: 'SpiraTest Project ID',
                displayHint: 'Project ID of SpiraTest server. This is needed if project name is not provided.',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                groupCheck: 'spiratestProject',
                checkExclusive: 'spiratestProject'
            },
            {
                name: 'spiraTestProjectName',
                displayName: 'SpiraTest Project Name',
                displayHint: 'Project Name of SpiraTest server. This is needed if project id is not provided.',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                groupCheck: 'spiratestProject',
                checkExclusive: 'spiratestProject'
            },
            {
                name: 'spiraTestRelease',
                columnlLength: '10',
                displayName: 'SpiraTest Release',
                displayHint: 'Release information if you want to upload test with release version',
                type: JenkinsJob.DESCRIPTOR_TYPE.OPTION,
                options:[
                    {
                        value: 0,
                        displayName: 'None'
                    },
                    {
                        value: 1,
                        displayName: 'apply Release with ID'
                    },
                    {
                        value: 2,
                        displayName: 'apply Release with Version Number'
                    },
                    {
                        value: 3,
                        displayName: 'apply Release with Version Number and Name (it will automatically create a new one if not exist)'
                    }
                ],
                childs: [
                    [
                    ],
                    [
                        {
                            name: 'spiraTestReleaseID',
                            displayName: 'Release ID',
                            displayHint: 'Release ID of release in SpiraTest server.',
                            type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                            required:true
                        }
                    ],
                    [
                        {
                            name: 'spiraTestReleaseVersion',
                            displayName: 'Release Version Number',
                            displayHint: 'Release version number of release in SpiraTest server.',
                            type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                            required:true
                        }
                    ],
                    [
                        {
                            name: 'spiraTestReleaseName',
                            displayName: 'Release Name',
                            displayHint: 'Release name of release in SpiraTest server.',
                            type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                            required:true
                        },
                        {
                            name: 'spiraTestReleaseVersion',
                            displayName: 'Release Version Number',
                            displayHint: 'Release version number of release in SpiraTest server.',
                            type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                            required:true
                        }
                    ]
                ]
            },
            {
                name: 'TestCaseFolderName',
                displayName: 'TestCase Folder Name',
                displayHint: 'TestCase will be created and TestCase in this TestCase Folder. This is needed if uploading to SpiraTest is required.',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                required:true
            },
            {
                name: 'TestCaseNamePattern',
                displayName: 'TestCase Name Pattern',
                displayHint: 'Regular Expression Pattern of testcase name. Testcase name will be proccessed by this regular expression pattern.If not to process then keep it empty',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                required:false
            },
            {
                name: 'TestCaseNameReplace',
                displayName: 'TestCase Name Replace',
                displayHint: 'Regular Expression Replace of testcase name. Testcase name will be replaced after using the pattern.If not to process then keep it empty',
                type: JenkinsJob.DESCRIPTOR_TYPE.STRING,
                required:false
            },
            {
                name: 'FolderSuppressLevel',
                displayName: 'TestCase Folder Suppress Level',
                displayHint: 'Suppress level of folder structure of report.',
                type: JenkinsJob.DESCRIPTOR_TYPE.OPTION,
                options: [
                    {
                        value: 0,
                        displayName: '0',
                        displayHint: 'expand all folders'
                    },
                    {
                        value: 1,
                        displayName: '1',
                        displayHint: 'expand all folders and remove testcase class name folder'
                    },
                    {
                        value: 2,
                        displayName: '2',
                        displayHint: 'expand all folders and remove testcase class name folder and file name folder'
                    }
                ]
            },
            {
                name: 'SpiraTestOptions',
                displayName: 'Options',
                displayHint: 'Additional options',
                type: JenkinsJob.DESCRIPTOR_TYPE.OPTION,
                multiple: true,
                options:[
                    {
                        value: 1,
                        name: 'AutoCreateTestCase',
                        displayName: 'Auto Create TestCase',
                        displayHint: 'If TaaS cannot find specific testcase or testcase folder, then TaaS will create a new one'
                    }
                ]
            }
        ]
    }
];


/**
 * Get the option descriptor for the static create method
 *
 * @static
 * @returns {array} option descriptor
 */
JenkinsTestPythonUnitTestJob.getCreateOptionsDescriptor = function() {
    return OPTIONS_DESCRIPTOR;
};


/**
 * Get the option descriptor for the update method
 *
 * @static
 * @returns {array} option descriptor
 */
JenkinsTestPythonUnitTestJob.getUpdateOptionsDescriptor = function() {
    return OPTIONS_DESCRIPTOR;
};


/**
 * @private
 */
JenkinsTestPythonUnitTestJob.__validateCreateOptions = function(opts) {

    // TODO: robust file path validation
    var relFilePathRE = new RegExp('^[^/;:|~&`\'"][^;:|~&`\'"]*$');  // forbid these characters
    function testFilePath(filePath) {
        // contains forbidden characters
        if (!relFilePathRE.test(filePath)) return false;
        // escapes the current working directory
        if (path.normalize(filePath).indexOf('../') >= 0 ) return false;
        return true;
    }

    var errors = [];

    if (opts.startScriptPath && !testFilePath(opts.startScriptPath)) {
        errors.push({
            name: 'startScriptPath',
            err: new Error('Invalid start script path')
        });
    }

    if (opts.pythonVersion) {
        let valid_python_vers = [
            JenkinsTestPythonUnitTestJob.PYTHON_VER.V2,
            JenkinsTestPythonUnitTestJob.PYTHON_VER.V3
        ];
        if (valid_python_vers.indexOf(parseInt(opts.pythonVersion)) == -1) {
            errors.push({
                name: 'pythonVersion',
                err: new Error('Invalid Python version')
            });
        }
    }

    return errors;
};


/**
 * Validate the options for the static create method<br/>
 *
 * @static
 * @returns {object} validation results. Attributes:
 *   <ul>
 *     <li>result (boolean): validation results</li>
 *     <li>message (string): the message when an error is detected</li>
 *   </ul>
 */
JenkinsTestPythonUnitTestJob.validateCreateOptions = function(opts) {
    return JenkinsTestPythonUnitTestJob.__validateCreateOptions(opts);
};


/**
 * Validate the options for the update method<br/>
 *
 * @static
 * @returns {object} validation results. Attributes:
 *   <ul>
 *     <li>result (boolean): validation results</li>
 *     <li>message (string): the message when an error is detected</li>
 *   </ul>
 */
JenkinsTestPythonUnitTestJob.validateUpdateOptions = function(opts) {
    return JenkinsTestPythonUnitTestJob.__validateCreateOptions(opts);
};


/**
 * Update Jenkins job configuration.
 * @param {Object} opts job settings. See {@link JenkinsTestPythonUnitTestJob.getCreateOptionsDescriptor} for more info.
 * @param {fn} callback receives the job update response. Parameters:
 *   <ul>
 *     <li>err: error object</li>
 *     <li>code: update response. Options:
 *       <ul>
 *         <li>JenkinsJob.UPDATE.OK</li>
 *         <li>JenkinsJob.UPDATE.NOT_EXISTS</li>
 *         <li>JenkinsJob.UPDATE.ERROR</li>
 *       </ul>
 *     </li>
 *   </ul>
 */
JenkinsTestPythonUnitTestJob.prototype.update = function(opts, callback) {
    var self = this;
    JenkinsTestPythonUnitTestJob.__createJobCfg(opts, self._name, function(err, jobCfgOpts) {
        if (err) {
            let errObj = new Error(FULL_JOB_NAME + ' update error: ' + err.toString());
            logger.debug(errObj);
            return callback(errObj, JenkinsJob.UPDATE.ERROR);
        }
        return self._update(jobCfgOpts, callback);
    });
};


JenkinsTestPythonUnitTestJob.prototype.getRunFileList = function(opts, callback) {
    var self = this;
    var jobName = self._name;
    var runFileName = JenkinsTestPythonUnitTestJob.__getRunFileName(jobName);

    return JenkinsJob._getRunFileList(jobName, opts, function(err, fileList) {
        if (err) {
            return callback(new Error(FULL_JOB_NAME + ' getRunFileList error: ' + err.toString()));
        }

        var fileDescriptorList = [];

        for (var idx=0; idx<fileList.length; ++idx) {
            var fileDescriptor = fileList[idx];
            var filePath = fileDescriptor.path;
            if (filePath == runFileName) {
                fileDescriptor.title = 'Python Unit test results';
                fileDescriptor.viewable = true;
                fileDescriptorList.push(fileDescriptor);
                break;
            }
        }

        return callback(err, fileDescriptorList);
    });
};


/**
 * @private
 */
JenkinsTestPythonUnitTestJob.__getRunStatsInfo = function(filePath) {
    var statsInfo = {
        title: 'Python unit test results',
        id: {filePath: filePath},
        fieldNames: ['passes', 'failures', 'errors'],
        fieldTypes: [
            JenkinsJob.STATS_FIELD_TYPE.NUMBER,
            JenkinsJob.STATS_FIELD_TYPE.NUMBER,
            JenkinsJob.STATS_FIELD_TYPE.NUMBER
        ],
        fieldUnits: ['', ''],
        fieldIndicies: [],
        fieldProportion: [0, 1, 2],
        multiple: false
    };
    return statsInfo;
};


JenkinsTestPythonUnitTestJob.prototype.getRunStatsList = function(opts, callback) {
    var self = this;
    var jobName = self._name;

    self.getRunFileList(opts, function(err, fileDescriptorList) {
        if (err) {
            return callback(new Error(FULL_JOB_NAME + ' getRunStatsList error: ' + err.toString()));
        }

        var runStatsList = [];

        if (Array.isArray(fileDescriptorList) && fileDescriptorList.length == 1) {
            var fileDescriptor = fileDescriptorList[0];
            var filePath = fileDescriptor.path;
            var statsInfo = JenkinsTestPythonUnitTestJob.__getRunStatsInfo(filePath);
            runStatsList.push(statsInfo);
        }
        return callback(err, runStatsList);
    });
};


/**
 * Analyze the Python run files
 * @param {string} contents file contents
 * @param {fn} callback Receives results. Parameters:
 *   <ul>
 *     <li>err (object): error object</li>
 *     <li>results (object): statistics</li>
 *   </ul>
 * @private
 */
JenkinsTestPythonUnitTestJob.__analyzeRunStats = function(contents, callback) {

    function onError(err) {
        return callback(err);
    }

    if (!contents) return onError(new Error('Empty file'));

    var matcher = new RegExp("<tr id='total_row'>\\s*<td>Total</td>\\s*" +
                             "<td>(\\d+)</td>\\s*" +
                             "<td>(\\d+)</td>\\s*" +
                             "<td>(\\d+)</td>\\s*" +
                             "<td>(\\d+)</td>",
                            'm');
    var matchResults = matcher.exec(contents);

    if (!matchResults) return onError(new Error('Invalid file format'));

    var results = [
        parseInt(matchResults[2]),
        parseInt(matchResults[3]),
        parseInt(matchResults[4])
    ];

    return callback(null, results);
};


JenkinsTestPythonUnitTestJob.__escapeDoubleQuotes = function(str){
    return str.replace(/\"/g,"\\\"");
};


JenkinsTestPythonUnitTestJob.prototype.getRunStats = function(opts, callback) {

    function onError(err) {
        var errName = FULL_JOB_NAME + '#getRunStats';
        if (err.name) errName += (' ' + err.name);
        err.name = errName;

        logger.error(err.toString());
        return callback(err);
    }

    var self = this;
    var jobName = self._name;
    var runFileName = JenkinsTestPythonUnitTestJob.__getRunFileName(jobName);

    // validate input options
    if (!opts || !opts.statsId || !opts.statsId.filePath || opts.statsId.filePath != runFileName) {
        return onError(new Error('Invalid opts'));
    }

    // get file to analyze
    var filePath = runFileName;
    var runFileOpts = {
        filePath: filePath
    };
    if (opts.runNumber) runFileOpts.runNumber = opts.runNumber;

    return self.getRunFile(runFileOpts, function(err, fileBuf) {
        if (err) return onError(err);

        var fileContents = fileBuf.toString();
        return JenkinsTestPythonUnitTestJob.__analyzeRunStats(fileContents, function(err, results) {
            if (err) return onError(err);
            return callback(err, results, JenkinsTestPythonUnitTestJob.__getRunStatsInfo(filePath));
        });
    });
};


module.exports.JenkinsTestPythonUnitTestJob = JenkinsTestPythonUnitTestJob;
module.exports.staticCreate = JenkinsTestPythonUnitTestJob.create;
module.exports.constructor = JenkinsTestPythonUnitTestJob;
